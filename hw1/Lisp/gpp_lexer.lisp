(defvar count -1)
(defun gppinterpreter (&optional filename)
	(if filename (ReadFromFile filename) (ReadFromConsole))
)

(defun ReadFromConsole()
	(loop 
        (format t "~% ") 
        (interpreter (read-line))
    )
)
(defun ReadFromFile (filename)
	(let ((in (open filename :if-does-not-exist nil)))		
	   (when in (loop 
                  for line = (read-line in nil)
                  while line do (interpreter line)
               )
         (close in)
      )
	   (unless in (format t "FILE DOES NOT EXIST"))
   )
)
(defun countQuotes ( )
   ( if ( < count 0) (return-from countQuotes "OP_OC") (return-from countQuotes "OP_CC") ) 
   ( if ( < count 0) (setq count 1) (setq count -1) )
)
(defun checkValue (token)
   (let ((counter 0))
      (loop for char across token
         while char do (if (not (is-digit char)) (setf counter (+ 1 counter)))
   )
    (if (= 0 counter) (if (char= (char token 0) #\0) nil (return-from checkValue t)) nil))
)
;;check for digits
(defun is-digit (chr)
   (cond 
      ((char= chr #\0) t)
      ((char= chr #\1) t)
      ((char= chr #\2) t)
      ((char= chr #\3) t)
      ((char= chr #\4) t)
      ((char= chr #\5) t)
      ((char= chr #\6) t)
      ((char= chr #\7) t)
      ((char= chr #\8) t)
      ((char= chr #\9) t)
      (t nil)
   )
)
(defun checkIdentifier (token)
   (if (not token) nil )
   (if (is-digit (char token 0)) nil
      (if (every #'alphanumericp token) (format nil "IDENTIFIER") nil))
)
(defun findToken (token) 
	(cond 
      ((string= token "and") (format nil "KW_AND"))
      ((string= token "or") (format nil "KW_OR"))
      ((string= token "not") (format nil "KW_NOT"))
      ((string= token "equal") (format nil "KW_EQUAL"))
      ((string= token "less") (format nil "KW_LESS"))
      ((string= token "nil") (format nil "KW_NIL"))
      ((string= token "list") (format nil "KW_LIST"))
      ((string= token "append") (format nil "KW_APPEND"))
      ((string= token "concat") (format nil "KW_CONCAT"))
      ((string= token "set") (format nil "KW_SET"))
      ((string= token "deffun") (format nil "KW_DEFFUN"))
      ((string= token "for") (format nil "KW_FOR"))
      ((string= token "if") (format nil "KW_IF"))
      ((string= token "exit") (format nil "KW_EXIT"))
      ((string= token "load") (format nil "KW_LOAD"))
      ((string= token "disp") (format nil "KW_DISP"))
      ((string= token "true") (format nil "KW_TRUE"))
      ((string= token "false") (format nil "KW_FALSE"))
      ((string= token "+") (format nil "OP_PLUS"))
      ((string= token "-") (format nil "OP_MINUS"))
      ((string= token "/") (format nil "OP_DIV"))
      ((string= token "(") (format nil "OP_OP"))
      ((string= token ")") (format nil "OP_CP"))
      ((string= token ",") (format nil "OP_COMMA"))
      ((string= token "**") (format nil "OP_DBLMULT"))
      ((string= token "*") (format nil "OP_MULT"))
      ((string= token "\"") (countQuotes))
      ((checkValue token) (format nil "VALUE"))
      ((string= token "0") (format nil "VALUE"))
      (t (checkIdentifier token))
   )
)
(defun interpreter(line)
	(let ((arr (separate line)))
		(if (string= (car arr) ";;") (print "COMMENT")
			(loop for token in arr do (print (findToken token)))
		)
	)
)
(defun separate-string (lst)
   (format nil "~{~A~}" lst)
)
(defun checkSpace (c) (char= c #\Space))
(defun checkParentheses (chr)
   (cond ((string-equal chr ")") (return-from checkParentheses 1))
         ((string-equal chr "(") (return-from checkParentheses 1))
         (t (return-from checkParentheses nil))
   )
)
(defun separate (str)

	(setq str (separate-string (map 'list #'(lambda (c) 
		      (if (checkParentheses c) (concatenate 'string " " (string c) " ") (string c))) 
            (removeEscape str)
         )
      )
   )

	(let ((arr (loop for index from 0 to (- (length str) 1)
			   when (char= (aref str index) #\") collect index))
		   (index1 '()) (index2 '()) (space-index '())
      )
      (loop while arr do (setq index1 (car arr)) 
                  do (setq index2 (car (cdr arr)))
                  do (setq arr (cdr (cdr arr)))
                  do (setq space-index
                        (loop for index from 0 to (- (length str) 1)
                           when (and (> index index1) (< index index2) (char= (aref str index) #\Space)) 
                           collect index
                        )
                     )
      )
	   (separate-space (separate-string
            (loop for index from 0 to (- (length str) 1)
               if (member index space-index) collect #\. else collect (aref str index)
            )
         )
      )
   )
)
(defun separate-space (string &key (checkSpace #'checkSpace))
   (loop for start = (position-if-not checkSpace string)
      then (position-if-not checkSpace string :start (1+ end))
      for end = (and start (position-if checkSpace string :start start))
      when start :collect (subseq string start end)
      while end
   )
)
(defun removeEscape (str)
	(let ((escapes '(#\Space #\Newline #\Backspace #\Tab #\Return )))
	(string-trim escapes str))
)

(if *args* (gppinterpreter (car *args*)) (gppinterpreter))